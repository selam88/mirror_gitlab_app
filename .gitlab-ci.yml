variables:
  GIT_STRATEGY: fetch
  GIT_SSL_NO_VERIFY: "true"
  GIT_LFS_SKIP_SMUDGE: 1

.git-setup: &git_setup
  - echo "start data setup"
  - apt-get update -y
  - apt-get install openssh-client -y
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$GIT_SSH_PRIV_KEY")
  - git config --global user.email "s.amrari.ci_runner@pm.me"
  - git config --global user.name "Mr. Robot"
  - mkdir -p /root/.ssh
  - ssh-keyscan -H renkulab.io >> gitlab-known-hosts
  - cat gitlab-known-hosts >> /root/.ssh/known_hosts
  - mkdir /work
  - cd /work
  - git clone git@renkulab.io:selim.amrari.pro/test-first-project.git
  - cd test-first-project
  - git lfs install --local

stages:
  - build
  - tests
  - Data_ingestion
        
image_build:
  stage: build
  image: docker:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN http://$CI_REGISTRY
  script: |
    CI_COMMIT_SHA_7=$(echo $CI_COMMIT_SHA | cut -c1-7)
    docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA_7 .
    docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA_7

update-build:
  stage: build
  image: docker:stable
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN http://$CI_REGISTRY
  rules:
    - if: $CI_PIPELINE_REF == "Data_ingestion"
  script: |
    docker build --build-arg BUILDKIT_INLINE_CACHE=1 \
      --tag $CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}-update \
      --cache-from $CI_REGISTRY_IMAGE .
    docker push $CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}-update

syntax_check:
  stage: tests
  image: python:3.8
  before_script:
    - pip install flake8
  script:
    - flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    - flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
pytests:
  stage: tests
  image: python:3.8
  before_script:
    - pip install -r requirements.txt
  script:
    - pytest tests

Data_update:
  stage: Data_ingestion
  image: 
    name: $CI_REGISTRY_IMAGE:${CI_COMMIT_SHORT_SHA}-update
    entrypoint: ["bash", "-c"]
  before_script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN http://$CI_REGISTRY
    - *git_setup
  rules:
    - if: $CI_PIPELINE_REF == "Data_ingestion"
  script:
    - echo "start data_update"
    - git checkout $CI_COMMIT_BRANCH 
    - chmod +x src/bash_sc/update_data.sh
    - src/bash_sc/update_data.sh
    - git push origin $CI_COMMIT_BRANCH 

